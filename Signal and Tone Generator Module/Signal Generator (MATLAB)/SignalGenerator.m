% Project: Hands-Free Intraoral Electrolarynx
% Module: Signal and Tone Generator 
% Description: The SignalGenerator function is intended to produce an 
% impulse train or a sawtooth signal according to a given pitch value. As 
% for example: 120Hz for low frequency, 200Hz for medium frequency, and 
% 300Hz for high frequency. These values were established according to the 
% speech physiology.
% Author: Sujeily P. Fonseca-Gonzalez
% Username: Sujeily-Fonseca

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                      FORMAT FOR INPUT VARIABLES                         %
% pitch: Although the Hands-Free Intraoral Electrolarynx  project is      %
% focused on only three values for the pitch, this function does not      %
% require a validation of the inputs because the signals are generated by % 
% the person in charge of the module. The parameter is of type integer.   %                               
%                                                                         %
% signal: The signal to be generated according to the given picth value.  %
% The parameter is of type string. At the end, the output signal is       %
% stored in a .wav file.                                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function output = SignalGenerator(pitch, signal)

    if nargin ~= 2          % Verify the number of inputs
        disp('Please provide the pitch value and the desired signal.');
    else 
        %---------------------------------------------------------------------%
        %                         DEFINING VARIABLES                          %
        %---------------------------------------------------------------------%
        Fs = 48000;         % Common sampling rate in audio
        Ts = 1/Fs;          % Sample period 
        f = round(pitch);   % Number of cycles per second (120Hz for low frequency, 
                            % 200Hz for medium frequency, and 300Hz for
                            % high frequency
        t = 0:Ts:10;        % 10 seconds long signal)

        %---------------------------------------------------------------------%
        %                           IMPULSE TRAIN                             %
        %---------------------------------------------------------------------%
        if strcmp('impulse', signal) == true 
            impulse_train = zeros(size(t));     % Impulse train signal 

            %Calculate how many samples per cycle
            duration = (Fs/f);                  % Duration of the signal
            impulse_train(1:duration:end) = 1;  % Plugging ones in the zero array
            sound(impulse_train, Fs);           % Generating the sound
            file_name = join([int2str(pitch),'Hz','_ImpulseTrain']); % Name of the 
                                                                     % audio file
            audiowrite(join([file_name,'.wav']), impulse_train, Fs); % Saving signal 
                                                                     % in a .wav format

        %---------------------------------------------------------------------%
        %                      PLOT IMPULSE TRAIN SIGNAL                      %
        %---------------------------------------------------------------------%
            figure('Name', file_name, 'units','normalized','outerposition',[0 0 1 1]); % Open figure in full screen
            stem(t,impulse_train);              % Signal plot
            xlabel('Time (seconds)');           % Naming the x-axis
            ylabel('Amplitude');                % Naming the y-axis 
            title ((join([int2str(pitch),'Hz Impulse Train Signal']))); % Plot title
            xlim ([0 1])                        % Limiting x-axis to 1 second                                                        
   
        %---------------------------------------------------------------------%
        %                              SAWTOOTH                               %
        %---------------------------------------------------------------------%
        elseif strcmp('sawtooth', signal) == true 
            sawtooth_signal = sawtooth(2*pi*pitch*t); % Sawtooth signal
            sound(sawtooth_signal, Fs);               % Generating the sound
            file_name = join([int2str(pitch),'Hz','_Sawtooth']);       % Name of the 
                                                                       % audio file
            audiowrite(join([file_name,'.wav']), sawtooth_signal, Fs); % Saving signal 
                                                                       % in a .wav format

        %---------------------------------------------------------------------%
        %                         PLOT SAWTOOTH SIGNAL                        %
        %---------------------------------------------------------------------%
            figure('Name', file_name, 'units','normalized','outerposition',[0 0 1 1]); % Open figure in full screen
            plot(t,sawtooth_signal);            % Signal plot
            xlabel('Time (seconds)');           % Naming the x-axis
            ylabel('Amplitude');                % Naming the y-axis 
            title ((join([int2str(pitch),'Hz Sawtooth Signal']))); % Plot title
            xlim ([0 0.5])                      % Limiting x-axis to 0.5 second

        %---------------------------------------------------------------------%
        %                            INVALID IMPUT                            %
        %---------------------------------------------------------------------%
        else 
            disp('Invalid parameter. Allowed signals are "impulse" "or sawtooth".')
        end
    end 
    
end